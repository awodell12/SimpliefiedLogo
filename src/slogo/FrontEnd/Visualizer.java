package slogo.FrontEnd;

import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.paint.Color;
import javafx.scene.paint.Paint;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.util.Duration;
import org.xml.sax.SAXException;
import slogo.CommandResult;

import java.awt.*;
import java.io.IOException;
import java.util.Queue;

public class Visualizer {
    private static final int SIZE = 1000;
    private static final Paint BACKGROUND = Color.WHITE;
    private static final double MILLISECOND_DELAY = 1000;
    private static final Rectangle RUN_BUTTON_SHAPE = new Rectangle(300, 750, 60, 40);
    private static final Rectangle COMMAND_BOX_SHAPE = new Rectangle(50, 700, 650, 100);
    private static final Rectangle TURTLE_VIEW_SHAPE = new Rectangle(50, 100, 650, 600);
    private static final Rectangle HISTORY_VIEW_SHAPE = new Rectangle(750, 100, 200, 250);
    private static final Rectangle UDC_VIEW_SHAPE = new Rectangle(750, 400, 200, 250);
    private static final Rectangle VARIABLES_VIEW_SHAPE = new Rectangle(750, 700, 200, 200);
    private static final Rectangle CLEAR_HISTORY_BUTTON_SHAPE = new Rectangle(950, 100, 50, 50);
    private static final Rectangle CLEAR_COMMAND_BOX_SHAPE = new Rectangle(900, 925, 75, 50);
    private static final Rectangle CLEAR_UDC_BUTTON_SHAPE = new Rectangle(950, 400, 50, 50);
    private static final Rectangle CLEAR_VARIABLES_BUTTON_SHAPE = new Rectangle(950, 700, 50, 50);

    private Button myRunButton;
    private Button myClearCommandBoxButton;
    private Button myClearHistoryButton;
    private Button myHelpButton;
    private CommandBox myCommandBox;
    private ClearableEntriesBox myHistory;
    private ClearableEntriesBox myUserDefinedCommands;
    private ClearableEntriesBox myVariables;
    private TurtleView myTurtleView;
    private Queue<String> myInstructionQueue;
    private Stage myStage;
    private Group myRoot;

    /**
     * Constructor for the visualizer class, which manages the display components and state
     */
    public Visualizer() throws IOException {
        myStage = new Stage();
        Scene display = setUpDisplay();
        myStage.setScene(display);
        myStage.show();
    }

    /**
     * Pops the first element of the instruction queue, which contains strings that are either scripts taken directly
     *      from the command box, or special instructions generated by buttons which need to interact with model
     * Relevant Features:
     * React to the text and update the model
     * Choose a language in which slogo commands are understood (with a button/menu)
     * @return the instruction string, uninterpreted
     */
    public String popInstructionQueue(){
        return myInstructionQueue.poll();
    }

    /**
     * Interpret result of CommandResults object, update everything that is updateable
     * Relevant Features:
     * React to the text and update the model
     * See the results of the turtle executing commands displayed visually
     * See resulting errors in user friendly way
     * see user defined commands currently available
     * @param result
     */
    public void interpretResult(CommandResult result){
        // maybe make this take exact parameters
    }

    private Scene setUpDisplay() throws IOException{
        myRoot = new Group();
        myCommandBox = new CommandBox(myRoot, COMMAND_BOX_SHAPE, CLEAR_COMMAND_BOX_SHAPE);
        myHistory = new ClearableEntriesBox(myRoot, HISTORY_VIEW_SHAPE, CLEAR_HISTORY_BUTTON_SHAPE);
        myUserDefinedCommands = new ClearableEntriesBox(myRoot, UDC_VIEW_SHAPE, CLEAR_UDC_BUTTON_SHAPE);
        myVariables = new ClearableEntriesBox(myRoot, VARIABLES_VIEW_SHAPE, CLEAR_VARIABLES_BUTTON_SHAPE);
        myTurtleView = new TurtleView();

        makeButtons();
        KeyFrame frame = new KeyFrame(Duration.millis(MILLISECOND_DELAY), e -> {
            try {
                step();
            /*} catch (IOException ex) {
                System.out.println("Caught IO Exception");
            } catch (SAXException ex) {
                System.out.println("Caught SAXException");*/
            } catch (Exception ex) {

                System.out.println("Caught Exception");

            }
        });
        Timeline animation = new Timeline();
        animation.setCycleCount(Timeline.INDEFINITE);
        animation.getKeyFrames().add(frame);
        animation.play();
        return new Scene(myRoot, SIZE, SIZE, BACKGROUND);
    }

    private void step(){

    }

    // maybe make it a rect so it can also resize the turtle
    private void updateTurtle(Point pos){

    }

    private void makeButtons(){

    }

    private void addVariable(String name, int value){

    }
}
